var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.3,1,1.834]],["body/controllers/AppController.html",[0,1.923,1,2.714,2,1.483,3,0.543,4,0.472,5,0.472,6,2.794,7,1.082,8,2.145,9,4.254,10,2.393,11,0.04,12,1.334,13,3.403,14,1.654,15,1.558,16,1.133,17,0.973,18,2.38,19,2.794,20,0.543,21,0.121,22,2.393,23,1.654,24,1.654,25,3.403,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,0.948,29,1.834]],["body/modules/AppModule.html",[1,2.757,2,1.71,3,0.455,4,0.396,5,0.396,11,0.04,16,1.299,17,0.816,18,2.542,19,2.342,20,0.455,21,0.101,26,0.027,27,0.027,28,1.247,29,3.446,30,1.243,31,1.906,32,2.342,33,2.342,34,2.342,35,2.848,36,2.848,37,2.412,38,1.754,39,1.554,40,2.853,41,2.412,42,2.758,43,2.853,44,2.853,45,2.853]],["title/injectables/AppService.html",[18,1.45,46,1.3]],["body/injectables/AppService.html",[3,0.579,4,0.504,5,0.504,7,1.154,8,2.235,9,4.358,11,0.04,12,1.423,14,1.764,15,1.623,16,0.932,17,1.038,18,2.235,20,0.579,21,0.129,24,1.764,26,0.031,27,0.031,46,2.005,47,2.232,48,2.98,49,3.63,50,3.63,51,3.63]],["title/classes/CreatePostDto.html",[21,0.106,52,1.45]],["body/classes/CreatePostDto.html",[3,0.677,4,0.589,5,0.589,11,0.037,20,0.677,21,0.15,26,0.034,27,0.034,52,2.462,53,1.851,54,3.486,55,2.985]],["title/classes/CreateUserDto.html",[21,0.106,56,1.45]],["body/classes/CreateUserDto.html",[3,0.519,4,0.452,5,0.452,7,1.035,11,0.038,12,1.879,15,1.798,20,0.519,21,0.115,23,2.765,26,0.029,27,0.029,53,1.419,56,2.084,57,4.182,58,2.289,59,3.014,60,2.947,61,3.37,62,2.089,63,1.879,64,3.256,65,2.636,66,3.256,67,3.256]],["title/modules/DatabaseModule.html",[28,0.948,68,1.45]],["body/modules/DatabaseModule.html",[3,0.612,4,0.533,5,0.533,11,0.04,16,1.223,17,1.098,20,0.612,21,0.136,26,0.032,27,0.032,28,1.514,30,1.673,41,2.361,68,2.315,69,3.839,70,3.641,71,3.839,72,3.839]],["title/classes/Post.html",[21,0.106,73,1.45]],["body/classes/Post.html",[3,0.677,4,0.589,5,0.589,11,0.038,20,0.677,21,0.15,26,0.034,27,0.034,53,1.851,73,2.462,74,3.486]],["title/controllers/PostsController.html",[0,1.3,75,1.834]],["body/controllers/PostsController.html",[0,0.655,2,0.655,3,0.24,4,0.209,5,0.209,7,0.478,8,1.178,10,2.698,11,0.04,12,1.504,14,1.865,15,1.637,16,0.985,17,0.43,20,0.24,21,0.053,22,1.056,23,0.73,24,2.098,26,0.017,27,0.017,52,1.994,62,1.524,63,1.761,73,2.451,75,1.491,76,1.234,77,1.234,78,3.498,79,2.852,80,1.7,81,2.151,82,1.491,83,1.491,84,1.491,85,1.234,86,1.234,87,1.503,88,3.369,89,2.523,90,1.99,91,1.503,92,1.905,93,1.905,94,2.502,95,1.234,96,2.872,97,1.503,98,1.503,99,0.924,100,1.234,101,1.503,102,1.178,103,2.994,104,1.503,105,0.924,106,1.503,107,2.502,108,1.99,109,1.503,110,0.924,111,2.446,112,1.99,113,1.503,114,1.705,115,1.234,116,1.234,117,1.481,118,1.234,119,0.924,120,1.705,121,0.924,122,3.15,123,2.872,124,0.924,125,1.503,126,2.872,127,2.502,128,1.234,129,1.503,130,1.503,131,1.234,132,1.234,133,1.503,134,1.234,135,1.503,136,1.234,137,1.234,138,1.503]],["title/modules/PostsModule.html",[28,0.948,35,1.625]],["body/modules/PostsModule.html",[2,1.756,3,0.473,4,0.412,5,0.412,11,0.04,16,1.317,17,0.848,20,0.473,21,0.105,26,0.027,27,0.027,28,1.28,30,1.293,31,1.958,35,2.999,37,2.477,38,1.824,39,1.615,41,2.477,42,2.085,68,2.493,75,2.813,117,2.572,118,2.435,139,2.435,140,2.435,141,2.435,142,2.966,143,2.966,144,2.435,145,2.832,146,2.966,147,2.966]],["title/injectables/PostsService.html",[46,1.3,117,1.45]],["body/injectables/PostsService.html",[3,0.31,4,0.27,5,0.27,7,0.619,8,1.444,11,0.04,12,1.794,14,2.111,15,1.616,16,1.115,17,0.557,20,0.31,21,0.069,23,0.946,24,2.111,26,0.02,27,0.02,46,1.295,47,1.197,52,2.111,62,1.893,63,1.702,65,2.216,73,1.444,79,3.094,80,1.444,81,2.48,82,1.827,83,1.827,84,1.827,85,2.439,92,2.365,93,2.365,99,1.827,103,2.48,105,1.827,110,1.827,111,2.593,117,1.444,119,1.197,120,2.089,121,1.197,148,1.598,149,1.368,150,1.946,151,3.311,152,1.946,153,2.971,154,1.946,155,2.671,156,1.946,157,1.946,158,1.946,159,1.946,160,1.368,161,1.946,162,1.197,163,1.946,164,1.598,165,1.946,166,1.946,167,1.946,168,1.946,169,1.368,170,1.598,171,1.946]],["title/classes/UpdatePostDto.html",[21,0.106,111,1.625]],["body/classes/UpdatePostDto.html",[3,0.62,4,0.54,5,0.54,11,0.039,16,1.233,20,0.62,21,0.138,26,0.033,27,0.033,52,1.89,53,1.695,55,2.734,80,1.89,111,2.615,120,2.734,124,2.391,172,3.192,173,3.192,174,3.192,175,3.889]],["title/classes/UpdateUserDto.html",[21,0.106,176,1.625]],["body/classes/UpdateUserDto.html",[3,0.616,4,0.536,5,0.536,11,0.039,16,1.228,20,0.616,21,0.137,26,0.033,27,0.033,53,1.684,56,1.878,58,2.716,80,1.878,173,3.172,174,3.172,176,2.604,177,3.172,178,3.172,179,3.172,180,2.716,181,3.864]],["title/classes/User.html",[21,0.106,102,1.45]],["body/classes/User.html",[3,0.562,4,0.489,5,0.489,11,0.038,12,1.381,15,1.96,20,0.562,21,0.125,26,0.031,27,0.031,53,1.536,60,2.775,61,3.173,62,2.288,63,1.381,92,1.919,93,1.919,102,2.193,149,2.477,182,2.892,183,3.523,184,3.523,185,3.523,186,3.523,187,3.523,188,3.523,189,3.523]],["title/controllers/UsersController.html",[0,1.3,190,1.834]],["body/controllers/UsersController.html",[0,0.648,2,0.648,3,0.237,4,0.206,5,0.206,7,0.473,8,1.169,10,2.684,11,0.04,12,1.496,14,1.855,15,1.632,16,1.049,17,0.425,20,0.237,21,0.053,22,1.046,23,0.723,24,2.089,26,0.016,27,0.016,56,1.985,62,1.516,63,1.754,73,1.169,77,1.221,79,3.043,80,1.69,81,2.138,82,1.479,83,1.479,84,1.479,86,1.221,88,3.353,89,2.512,90,1.975,92,1.894,93,1.894,94,1.221,95,1.221,96,2.855,99,0.915,100,1.221,102,2.405,103,2.842,105,0.915,107,1.221,110,0.915,112,1.975,114,1.691,115,1.221,116,1.221,119,0.915,121,0.915,122,2.855,123,2.855,124,0.915,126,2.486,127,2.486,128,1.221,131,1.221,132,1.221,134,1.221,136,1.975,137,1.221,155,2.512,176,2.437,180,1.691,190,1.479,191,1.221,192,3.478,193,1.221,194,1.488,195,1.488,196,1.488,197,1.488,198,1.488,199,1.488,200,1.488,201,1.488,202,1.471,203,1.221,204,1.221,205,1.488,206,1.488,207,1.488,208,1.488,209,1.488,210,1.488,211,1.488,212,1.488]],["title/modules/UsersModule.html",[28,0.948,36,1.625]],["body/modules/UsersModule.html",[2,1.744,3,0.468,4,0.408,5,0.408,11,0.04,16,1.313,17,0.84,20,0.468,21,0.104,26,0.027,27,0.027,28,1.272,30,1.28,31,1.945,36,2.992,37,2.46,38,1.806,39,1.599,41,2.46,42,2.813,68,2.564,144,2.411,190,2.798,202,2.564,203,2.411,213,2.411,214,2.937,215,2.411,216,2.937,217,2.937,218,2.813,219,2.937]],["title/injectables/UsersService.html",[46,1.3,202,1.45]],["body/injectables/UsersService.html",[3,0.288,4,0.251,5,0.251,7,0.574,8,1.363,11,0.04,12,1.741,14,2.04,15,1.636,16,1.078,17,0.516,20,0.288,21,0.064,23,0.877,24,2.04,26,0.019,27,0.019,46,1.222,47,1.11,56,2.04,60,1.11,62,1.936,63,1.645,65,2.114,79,3.199,80,1.363,81,2.384,82,1.724,83,1.724,84,1.724,92,2.286,93,2.286,99,1.724,102,1.363,103,2.581,105,1.724,110,1.724,119,1.11,121,1.11,149,1.269,151,3.182,155,2.947,160,1.269,162,1.11,164,1.482,169,1.269,170,1.482,176,2.525,180,1.971,193,2.302,202,1.363,204,1.482,220,1.482,221,1.806,222,1.806,223,2.804,224,1.806,225,1.806,226,1.806,227,1.806,228,1.806,229,1.806,230,1.806,231,2.804,232,1.806,233,1.806,234,2.804,235,3.438,236,1.806,237,1.806,238,1.806]],["title/coverage.html",[239,2.843]],["body/coverage.html",[0,1.682,1,1.34,5,0.302,6,1.789,11,0.04,18,1.059,21,0.169,26,0.022,27,0.022,28,0.693,46,1.682,48,1.789,52,1.059,54,1.789,55,2.274,56,1.059,57,1.789,58,2.274,63,0.854,70,1.532,73,1.572,74,1.789,75,1.34,76,1.789,102,1.572,111,1.187,117,1.059,145,1.532,148,1.789,172,1.789,176,1.187,177,1.789,182,1.789,190,1.34,191,1.789,202,1.059,218,1.532,220,1.789,239,1.532,240,1.789,241,2.179,242,2.179,243,5.782,244,3.858,245,1.789,246,4.779,247,5.426,248,2.274,249,3.235,250,2.656,251,2.179,252,3.235,253,2.179,254,3.235,255,1.789,256,3.235,257,1.789,258,1.789,259,1.789,260,3.235,261,2.179,262,1.789,263,1.789,264,1.789,265,1.789,266,2.179,267,2.179]],["title/dependencies.html",[31,1.74,268,2.056]],["body/dependencies.html",[11,0.04,17,1.064,26,0.032,27,0.032,31,1.808,124,2.287,162,2.287,178,3.054,179,3.054,269,5.106,270,3.72,271,3.72,272,3.054,273,3.72,274,3.72,275,3.72,276,3.72,277,3.72,278,3.72,279,3.72,280,3.72,281,3.72]],["title/miscellaneous/functions.html",[282,1.54,283,2.939]],["body/miscellaneous/functions.html",[7,1.331,11,0.034,26,0.034,27,0.034,248,2.944,250,4.757,259,3.438,282,2.575,283,3.438,284,3.438,285,4.187]],["title/index.html",[7,0.796,286,2.056,287,2.056]],["body/index.html",[4,0.375,11,0.039,26,0.026,27,0.026,89,1.66,239,1.897,288,2.699,289,2.699,290,3.775,291,2.699,292,2.699,293,2.699,294,2.699,295,2.699,296,2.699,297,4.353,298,2.699,299,2.699,300,2.699,301,2.699,302,5.277,303,2.699,304,2.699,305,2.699,306,5.141,307,2.699,308,2.699,309,3.775,310,2.699,311,2.699,312,2.699,313,2.699,314,3.775,315,3.775,316,2.699,317,2.699,318,2.699,319,3.099,320,3.775,321,2.699,322,2.699,323,2.699,324,2.699,325,2.699,326,2.216,327,2.699,328,2.699,329,2.699,330,2.699,331,2.699,332,2.699,333,2.699,334,2.699,335,2.699,336,2.699,337,2.216,338,2.699,339,2.699,340,2.699,341,2.699,342,2.699,343,2.699,344,1.66]],["title/license.html",[286,2.056,287,2.056,344,1.54]],["body/license.html",[11,0.026,26,0.026,27,0.026,39,1.457,169,1.881,240,2.196,272,2.196,319,2.196,344,1.645,345,4.332,346,2.675,347,2.675,348,2.675,349,2.675,350,2.675,351,3.751,352,2.675,353,2.675,354,2.675,355,2.675,356,2.675,357,2.675,358,3.751,359,5.459,360,2.675,361,2.675,362,2.675,363,4.332,364,2.675,365,3.751,366,2.675,367,2.675,368,3.751,369,2.675,370,2.675,371,2.675,372,2.675,373,2.675,374,2.675,375,2.675,376,3.751,377,2.675,378,2.675,379,2.675,380,2.675,381,2.675,382,2.675,383,2.675,384,3.751,385,3.751,386,2.675,387,2.675,388,2.675,389,2.675,390,2.675,391,2.675,392,2.675,393,2.675,394,2.675,395,2.675,396,2.675,397,2.675,398,2.675,399,2.675,400,2.675,401,2.675,402,2.675,403,2.675,404,2.675,405,2.675,406,2.675,407,2.675,408,2.675,409,2.675,410,2.675,411,2.675,412,2.675,413,2.675]],["title/modules.html",[30,1.763]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.455,30,1.74,35,2.174,36,2.174,68,1.94,108,3.277,326,4.327,414,5.271,415,5.271,416,5.491,417,3.992]],["title/overview.html",[418,3.32]],["body/overview.html",[2,1.325,11,0.038,18,2.252,26,0.028,27,0.028,29,3.406,30,1.325,31,1.991,32,2.497,33,2.497,34,2.497,35,2.967,36,2.967,37,2.519,38,1.87,39,1.656,47,1.87,53,1.325,68,2.409,117,2.252,139,2.497,140,2.497,141,2.497,202,2.252,213,2.497,215,2.497,418,2.497,419,3.041,420,4.097,421,3.041,422,3.041,423,3.041]],["title/properties.html",[59,2.517,268,2.056]],["body/properties.html",[11,0.04,26,0.034,27,0.034,59,2.985,89,2.611,337,3.486,344,2.611,424,4.247,425,4.247,426,4.247]],["title/miscellaneous/variables.html",[282,1.54,427,2.939]],["body/miscellaneous/variables.html",[7,0.8,11,0.041,15,1.613,26,0.024,27,0.024,28,1.142,60,1.548,61,1.77,62,1.097,63,1.791,65,1.548,70,2.526,114,1.77,145,2.526,155,1.548,160,2.526,162,2.81,218,2.526,245,2.067,248,1.77,255,2.067,257,2.067,258,3.44,262,2.067,263,3.44,264,2.067,265,2.95,282,1.548,284,2.067,427,2.067,428,2.518,429,2.518,430,2.518,431,2.518,432,2.518,433,4.833,434,4.833,435,4.191,436,4.191,437,4.191,438,2.518,439,3.594,440,2.518,441,2.518,442,2.518,443,2.518,444,2.518]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":425,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":277,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":256,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":235,"title":{},"body":{"injectables/UsersService.html":{}}}],["2",{"_index":422,"title":{},"body":{"overview.html":{}}}],["200",{"_index":88,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["2022",{"_index":347,"title":{},"body":{"license.html":{}}}],["3",{"_index":420,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":279,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":419,"title":{},"body":{"overview.html":{}}}],["6",{"_index":421,"title":{},"body":{"overview.html":{}}}],["6.1.3",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["6.7.1",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":281,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":269,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":234,"title":{},"body":{"injectables/UsersService.html":{}}}],["above",{"_index":383,"title":{},"body":{"license.html":{}}}],["action",{"_index":169,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["address",{"_index":60,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["address:string",{"_index":187,"title":{},"body":{"classes/User.html":{}}}],["address=address",{"_index":189,"title":{},"body":{"classes/User.html":{}}}],["age",{"_index":61,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["age:string",{"_index":186,"title":{},"body":{"classes/User.html":{}}}],["age=age",{"_index":188,"title":{},"body":{"classes/User.html":{}}}],["amazing",{"_index":327,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":374,"title":{},"body":{"license.html":{}}}],["apibearerauth",{"_index":205,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":122,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":123,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":206,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":304,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":296,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":411,"title":{},"body":{"license.html":{}}}],["associated",{"_index":360,"title":{},"body":{"license.html":{}}}],["async",{"_index":79,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":337,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":401,"title":{},"body":{"license.html":{}}}],["available",{"_index":108,"title":{},"body":{"controllers/PostsController.html":{},"modules.html":{}}}],["backers",{"_index":328,"title":{},"body":{"index.html":{}}}],["body",{"_index":114,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":416,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":414,"title":{},"body":{"modules.html":{}}}],["building",{"_index":291,"title":{},"body":{"index.html":{}}}],["c",{"_index":346,"title":{},"body":{"license.html":{}}}],["charge",{"_index":355,"title":{},"body":{"license.html":{}}}],["claim",{"_index":404,"title":{},"body":{"license.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Post.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["classes",{"_index":53,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Post.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":139,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":140,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":141,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":213,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":214,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":215,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["conditions",{"_index":382,"title":{},"body":{"license.html":{}}}],["connection",{"_index":412,"title":{},"body":{"license.html":{}}}],["const",{"_index":230,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor",{"_index":149,"title":{},"body":{"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('post_model",{"_index":163,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(@inject('user_model",{"_index":229,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(name",{"_index":183,"title":{},"body":{"classes/User.html":{}}}],["constructor(name:string",{"_index":185,"title":{},"body":{"classes/User.html":{}}}],["constructor(postmodel",{"_index":150,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usermodel",{"_index":221,"title":{},"body":{"injectables/UsersService.html":{}}}],["contract",{"_index":408,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('posts",{"_index":125,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":207,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copies",{"_index":376,"title":{},"body":{"license.html":{}}}],["copy",{"_index":358,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":345,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":239,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":80,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":128,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["create(createpostdto",{"_index":85,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["create(createuserdto",{"_index":193,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":90,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createpostdto",{"_index":52,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":56,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["damages",{"_index":405,"title":{},"body":{"license.html":{}}}],["database.providers",{"_index":71,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":144,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["database_connection",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":68,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":70,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":362,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":413,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":107,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":136,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":106,"title":{},"body":{"controllers/PostsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":89,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":305,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":372,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":240,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dto/create",{"_index":119,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":121,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":316,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":292,"title":{},"body":{"index.html":{}}}],["entities/post.entity",{"_index":161,"title":{},"body":{"injectables/PostsService.html":{}}}],["event",{"_index":400,"title":{},"body":{"license.html":{}}}],["exec",{"_index":237,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":72,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["express",{"_index":272,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":174,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["faruqui",{"_index":350,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["files",{"_index":361,"title":{},"body":{"license.html":{}}}],["find",{"_index":96,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["findall",{"_index":81,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":82,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":132,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":99,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["fitness",{"_index":396,"title":{},"body":{"license.html":{}}}],["following",{"_index":381,"title":{},"body":{"license.html":{}}}],["framework",{"_index":290,"title":{},"body":{"index.html":{}}}],["free",{"_index":354,"title":{},"body":{"license.html":{}}}],["function",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":283,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":379,"title":{},"body":{"license.html":{}}}],["get(':id",{"_index":131,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":100,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":95,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":286,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":353,"title":{},"body":{"license.html":{}}}],["graph",{"_index":417,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":323,"title":{},"body":{"index.html":{}}}],["hello",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":334,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":352,"title":{},"body":{"license.html":{}}}],["holders",{"_index":402,"title":{},"body":{"license.html":{}}}],["https://nestjs.com",{"_index":341,"title":{},"body":{"index.html":{}}}],["id",{"_index":103,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["id}'})@apiresponse({status",{"_index":198,"title":{},"body":{"controllers/UsersController.html":{}}}],["id}})@apiresponse({status",{"_index":101,"title":{},"body":{"controllers/PostsController.html":{}}}],["implied",{"_index":392,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DatabaseModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[databasemodule",{"_index":147,"title":{},"body":{"modules/PostsModule.html":{}}}],["included",{"_index":386,"title":{},"body":{"license.html":{}}}],["including",{"_index":365,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":160,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":46,"title":{"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":301,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":303,"title":{},"body":{"index.html":{}}}],["interface",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["interfaces",{"_index":423,"title":{},"body":{"overview.html":{}}}],["interfaces/user.interface",{"_index":204,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["join",{"_index":330,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":338,"title":{},"body":{"index.html":{}}}],["kind",{"_index":391,"title":{},"body":{"license.html":{}}}],["liability",{"_index":406,"title":{},"body":{"license.html":{}}}],["liable",{"_index":403,"title":{},"body":{"license.html":{}}}],["license",{"_index":344,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":320,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":366,"title":{},"body":{"license.html":{}}}],["limited",{"_index":393,"title":{},"body":{"license.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":395,"title":{},"body":{"license.html":{}}}],["merge",{"_index":370,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":276,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":282,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":319,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":309,"title":{},"body":{"index.html":{}}}],["model",{"_index":151,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["modify",{"_index":369,"title":{},"body":{"license.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":162,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.connect('mongodb://localhost/nest",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.model('post",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.model('user",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.schema",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":333,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":339,"title":{},"body":{"index.html":{}}}],["name",{"_index":62,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":297,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":343,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DatabaseModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":270,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":178,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":124,"title":{},"body":{"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":265,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":231,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":289,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":399,"title":{},"body":{"license.html":{}}}],["notice",{"_index":384,"title":{},"body":{"license.html":{}}}],["npm",{"_index":302,"title":{},"body":{"index.html":{}}}],["number",{"_index":65,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":357,"title":{},"body":{"license.html":{}}}],["open",{"_index":321,"title":{},"body":{"index.html":{}}}],["optional",{"_index":93,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":410,"title":{},"body":{"license.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":418,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":268,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":116,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":92,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":173,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":175,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":181,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":397,"title":{},"body":{"license.html":{}}}],["patch",{"_index":115,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":112,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["permission",{"_index":351,"title":{},"body":{"license.html":{}}}],["permit",{"_index":377,"title":{},"body":{"license.html":{}}}],["person",{"_index":356,"title":{},"body":{"license.html":{}}}],["persons",{"_index":378,"title":{},"body":{"license.html":{}}}],["please",{"_index":331,"title":{},"body":{"index.html":{}}}],["portions",{"_index":388,"title":{},"body":{"license.html":{}}}],["post",{"_index":73,"title":{"classes/Post.html":{}},"body":{"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post'})@apiresponse({status",{"_index":87,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@apioperation({summary",{"_index":86,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["post.dto",{"_index":120,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":55,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post_model",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postmodel",{"_index":153,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":78,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts'})@apiresponse({status",{"_index":97,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":143,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.providers",{"_index":146,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":118,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":258,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":75,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":35,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsproviders",{"_index":145,"title":{},"body":{"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postsservice",{"_index":117,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":77,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":164,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":311,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":288,"title":{},"body":{"index.html":{}}}],["project",{"_index":322,"title":{},"body":{"index.html":{}}}],["promise",{"_index":155,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":59,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"properties.html":{}}}],["provide",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":389,"title":{},"body":{"license.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["publish",{"_index":371,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":398,"title":{},"body":{"license.html":{}}}],["read",{"_index":332,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":275,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":83,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":137,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":105,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":300,"title":{},"body":{"index.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["restriction",{"_index":364,"title":{},"body":{"license.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":367,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":278,"title":{},"body":{"dependencies.html":{}}}],["rokan",{"_index":348,"title":{},"body":{"license.html":{}}}],["run",{"_index":306,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":280,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":293,"title":{},"body":{"index.html":{}}}],["sell",{"_index":375,"title":{},"body":{"license.html":{}}}],["server",{"_index":294,"title":{},"body":{"index.html":{}}}],["shall",{"_index":385,"title":{},"body":{"license.html":{}}}],["side",{"_index":295,"title":{},"body":{"index.html":{}}}],["software",{"_index":359,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":325,"title":{},"body":{"index.html":{}}}],["src/.../database.providers.ts",{"_index":428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.schema.ts",{"_index":429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../posts.providers.ts",{"_index":430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../repl.ts",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.providers.ts",{"_index":432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/database/database.module.ts",{"_index":69,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/posts/dto/create",{"_index":54,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":172,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":74,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/posts/interfaces/posts.interface.ts",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["src/posts/posts.controller.ts",{"_index":76,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:14",{"_index":91,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:21",{"_index":98,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":104,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":113,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:43",{"_index":109,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":142,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.providers.ts",{"_index":255,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/posts.service.ts",{"_index":148,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:11",{"_index":154,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":156,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:19",{"_index":157,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:23",{"_index":159,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:27",{"_index":158,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:8",{"_index":152,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/schemas/post.schema.ts",{"_index":257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":259,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":57,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":177,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":182,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:1",{"_index":184,"title":{},"body":{"classes/User.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":262,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":191,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:28",{"_index":195,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":197,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":199,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":201,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":200,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":216,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.providers.ts",{"_index":264,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.service.ts",{"_index":220,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":224,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":225,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":226,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":228,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":227,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":222,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":307,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":310,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":312,"title":{},"body":{"index.html":{}}}],["started",{"_index":287,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":299,"title":{},"body":{"index.html":{}}}],["statements",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":127,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":335,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string):promise",{"_index":167,"title":{},"body":{"injectables/PostsService.html":{}}}],["subject",{"_index":380,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":373,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":387,"title":{},"body":{"license.html":{}}}],["summary",{"_index":126,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":326,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":415,"title":{},"body":{"modules.html":{}}}],["table",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":266,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":315,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":318,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":317,"title":{},"body":{"index.html":{}}}],["tests",{"_index":314,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":324,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postmodel.create(createpostdto",{"_index":165,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.deleteone({_id:id",{"_index":171,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find",{"_index":166,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findone({_id:id",{"_index":168,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":129,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":130,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findone(id",{"_index":133,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.remove(id",{"_index":138,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(+id",{"_index":135,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usermodel.create(createuserdto",{"_index":232,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.deleteone({_id:id",{"_index":238,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find",{"_index":233,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid",{"_index":236,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":208,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":209,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":210,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":212,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":211,"title":{},"body":{"controllers/UsersController.html":{}}}],["title",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tort",{"_index":409,"title":{},"body":{"license.html":{}}}],["touch",{"_index":336,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":342,"title":{},"body":{"index.html":{}}}],["type",{"_index":63,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":179,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":298,"title":{},"body":{"index.html":{}}}],["uddin",{"_index":349,"title":{},"body":{"license.html":{}}}],["unit",{"_index":313,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":94,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":426,"title":{},"body":{"properties.html":{}}}],["update",{"_index":84,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":134,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":110,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatepostdto",{"_index":111,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updates",{"_index":170,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":176,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":368,"title":{},"body":{"license.html":{}}}],["usefactory",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":102,"title":{"classes/User.html":{}},"body":{"controllers/PostsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":194,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":180,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":58,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":67,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":66,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":64,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user_model",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usermodel",{"_index":223,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":192,"title":{},"body":{"controllers/UsersController.html":{}}}],["users'})@apiresponse({status",{"_index":196,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":217,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.providers",{"_index":219,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":203,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":263,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":190,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":36,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersproviders",{"_index":218,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":202,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["value",{"_index":434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":427,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":424,"title":{},"body":{"properties.html":{}}}],["warranties",{"_index":394,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":390,"title":{},"body":{"license.html":{}}}],["watch",{"_index":308,"title":{},"body":{"index.html":{}}}],["website",{"_index":340,"title":{},"body":{"index.html":{}}}],["whether",{"_index":407,"title":{},"body":{"license.html":{}}}],["without",{"_index":363,"title":{},"body":{"license.html":{}}}],["world",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":329,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module'; \nimport { PostsModule } from './posts/posts.module';\n\n@Module({\n  imports: [UsersModule, PostsModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePostDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                address\n                            \n                            \n                                    Readonly\n                                age\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  readonly name: string;\n  readonly age: number;\n  readonly address: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Post { }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a Post'})@ApiResponse({status: 200, description: 'A post has been created'})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all the posts'})@ApiResponse({status: 200, description: 'All posts', type: 'Post[]'})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: Find a post with {id}})@ApiResponse({status: 200, description: 'Return the user with ${id}', type: 'Post'})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: Delete the post with {id} if available})\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a Post' })\n  @ApiResponse({ status: 200, description: 'A post has been created' })\n  async create(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all the posts' })\n  @ApiResponse({ status: 200, description: 'All posts', type: 'Post[]' })\n  async findAll() {\n    return this.postsService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: `Find a post with {id}` })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the user with ${id}',\n    type: 'Post',\n  })\n  async findOne(@Param('id') id: string) {\n    return this.postsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(+id, updatePostDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: `Delete the post with {id} if available` })\n  remove(@Param('id') id: string) {\n    return this.postsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nDatabaseModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { DatabaseModule } from '../database/database.module';\nimport { postsProviders } from './posts.providers';\n\n@Module({\n  imports:[DatabaseModule],\n  controllers: [PostsController],\n  providers: [PostsService, ...postsProviders]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updatePostDto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { Post } from './entities/post.entity';\nimport {Model} from 'mongoose';\n\n@Injectable()\nexport class PostsService {\n  constructor(@Inject('POST_MODEL') private readonly postModel: Model){}\n\n  async create(createPostDto: CreatePostDto): Promise {\n    return this.postModel.create(createPostDto);\n  }\n\n  async findAll(): Promise {\n    return  this.postModel.find({});\n  }\n\n  async findOne(id: string):Promise {\n    return this.postModel.findOne({_id:id})\n  }\n\n  update(id: number, updatePostDto: UpdatePostDto) {\n    return `This action updates a #${id} post`;\n  }\n\n  remove(id: string) {\n    return this.postModel.deleteOne({_id:id})\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, age: string, address: string)\n                    \n                \n                        \n                            \n                                Defined in src/users/entities/user.entity.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        age\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        address\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {\n    constructor(name:string, age:string, address:string){\n        name = name;\n        age=age;\n        address=address;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create User'})@ApiResponse({status: 200, description: 'An user has been created'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all the users'})@ApiResponse({status: 200, description: 'All users', type: 'User[]'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find the user with #{id}'})@ApiResponse({status: 200, description: 'Return the user with #{id}', type: 'User'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './interfaces/user.interface';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create User' })\n  @ApiResponse({ status: 200, description: 'An user has been created' })\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all the users' })\n  @ApiResponse({ status: 200, description: 'All users', type: 'User[]' })\n  async findAll(): Promise {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find the user with #{id}' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the user with #{id}',\n    type: 'User',\n  })\n  async findOne(@Param('id') id: string): Promise {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) : Promise {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { usersProviders } from './users.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UsersController],\n  providers: [UsersService, \n              ...usersProviders,\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './interfaces/user.interface';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class UsersService {\n  constructor(@Inject('USER_MODEL') private readonly userModel: Model) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const newUser = this.userModel.create(createUserDto);\n    return newUser;\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find({}, { _id: 1, name: 1, address: 1 });\n  }\n\n  async findOne(id: string): Promise {\n    return this.userModel.findById({ _id: id }).exec();\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  async remove(id: string): Promise  {\n   return this.userModel.deleteOne({_id:id})\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/interfaces/posts.interface.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.providers.ts\n            \n            variable\n            postsProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/schemas/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.providers.ts\n            \n            variable\n            usersProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            mongoose : ^6.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Rokan Uddin Faruqui\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nPostsModule -->\n\nDatabaseModule->PostsModule\n\n\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            postsProviders   (src/.../posts.providers.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            usersProviders   (src/.../users.providers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: (): Promise =>\n      mongoose.connect('mongodb://localhost/nest'),\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/posts/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n  title: String, \n  body: String,\n})\n                    \n                \n\n\n        \n    \n\n    src/posts/posts.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        postsProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'POST_MODEL',\n    useFactory: (mongoose: Mongoose) => mongoose.model('Post', PostSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n  name: String,\n  age: Number,\n  address: String,\n})\n                    \n                \n\n\n        \n    \n\n    src/users/users.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        usersProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'USER_MODEL',\n    useFactory: (mongoose: Mongoose) => mongoose.model('User', UserSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
